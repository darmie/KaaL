# KaaL Build Configuration
# This file defines platform-specific settings for building the KaaL microkernel

[build]
# Default platform to use if --platform is not specified
default_platform = "qemu-virt"

# Project structure
output_dir = "runtime/build"
bootimage_name = "kaal-boot.elf"

# Component directories
kernel_source_dir = "kernel"
elfloader_source_dir = "runtime/elfloader"
roottask_source_dir = "runtime/root-task"

# Kernel stack size (applies to all platforms)
kernel_stack_size = "0x4000" # 16KB

# Root task configuration (applies to all platforms)
root_task_stack_size = "0x10000" # 64KB

# Capability-based memory delegation (seL4-style)
# UntypedMemory capabilities delegated from kernel to root-task to system_init
untyped_root_task_size_bits = "26"    # 64MB (2^26) given to root-task by kernel
untyped_system_init_size_bits = "25"  # 32MB (2^25) delegated to system_init for spawning components

# =============================================================================
# QEMU virt platform (ARM64 Cortex-A53)
# =============================================================================
[platform.qemu-virt]
name = "QEMU virt (ARM64)"
arch = "aarch64"
kernel_target = "aarch64-unknown-none"
elfloader_target_json = "aarch64-unknown-none-elf.json"

# Memory layout
ram_base = "0x40000000" # RAM starts at 1GB
ram_size = "0x8000000"  # 128MB total RAM

# Device addresses
uart0_base = "0x09000000" # PL011 UART0
uart1_base = "0x09010000" # PL011 UART1
rtc_base = "0x0A000000"   # ARM PL031 RTC
timer_base = "0x0A003000" # ARM Generic Timer

# Interrupt controller (GICv2)
gic_dist_base = "0x08000000" # GIC Distributor
gic_cpu_base = "0x08010000"  # GIC CPU Interface
gic_dist_size = "0x10000"    # 64KB
gic_cpu_size = "0x10000"     # 64KB

# IRQ numbers (QEMU virt platform)
irq_timer = "27" # ARM Generic Timer
irq_uart0 = "33" # PL011 UART0
irq_uart1 = "34" # PL011 UART1

# Boot memory layout offsets (relative to ram_base)
dtb_offset = "0x0"            # DTB at ram_base + 0x0 = 0x40000000
roottask_offset = "0x600000"  # Root task at ram_base + 0x600000 = 0x40600000
elfloader_offset = "0x200000" # Elfloader at ram_base + 0x200000 = 0x40200000
kernel_offset = "0x400000"    # Kernel at ram_base + 0x400000 = 0x40400000

# Stack location (grows down from this address)
stack_top_offset = "0x8000000" # Stack top at ram_base + ram_size = 0x48000000

# Virtual memory layout (ARM64)
kernel_virt_base = "0xFFFF000000000000" # Kernel virtual address space start
user_virt_start = "0x80000000"          # User virtual address space start (2GB)
user_virt_max = "0x0000FFFFFFFFFFFF"    # User virtual address space max

# Component loader region sizes (automatically calculated from user_virt_start)
# Root-task ELF occupies the first portion of user address space
# Loader region comes after, used to temporarily map component binaries during spawning
loader_virt_offset = "0x100000"  # 1MB offset from user_virt_start (after root-task ELF)
loader_virt_size = "0xF00000"    # 15MB size (enough for largest component)

# IPC shared memory region size (automatically placed after loader region)
# Reserved in each component's address space for shared memory IPC
ipc_virt_size = "0x10000000"     # 256MB reserved for IPC shared memory

# Dynamic memory allocation starts after IPC region
# Used by memory_map syscall for per-process virtual address allocation
# This value is automatically calculated as: user_virt_start + loader_virt_offset + loader_virt_size + ipc_virt_size

# Page sizes (ARM64 standard)
page_size = "0x1000"          # 4KB
large_page_size = "0x200000"  # 2MB
huge_page_size = "0x40000000" # 1GB

# Memory management configuration
heap_size = "0x100000"         # 1MB kernel heap
max_physical_frames = "262144" # 256K frames = 1GB max physical memory

# QEMU launch parameters
qemu_machine = "virt"
qemu_cpu = "cortex-a53"
qemu_memory = "128M"

# =============================================================================
# Raspberry Pi 4 (ARM64 Cortex-A72)
# =============================================================================
[platform.rpi4]
name = "Raspberry Pi 4 (ARM64)"
arch = "aarch64"
kernel_target = "aarch64-unknown-none"
elfloader_target_json = "aarch64-unknown-none-elf.json"

# Memory layout
ram_base = "0x0"        # RAM starts at 0x0
ram_size = "0x40000000" # 1GB (for 1GB model)

# Device addresses
uart_base = "0xFE201000" # Mini UART

# Interrupt controller (GICv2)
gic_dist_base = "0xFF841000" # GIC Distributor (BCM2711)
gic_cpu_base = "0xFF842000"  # GIC CPU Interface (BCM2711)
gic_dist_size = "0x1000"     # 4KB
gic_cpu_size = "0x2000"      # 8KB

# IRQ numbers (BCM2711)
irq_timer = "30" # Generic Timer
irq_uart0 = "57" # Mini UART
irq_uart1 = "57" # Mini UART (same as uart0)

# Boot memory layout offsets
dtb_offset = "0x0"           # DTB at 0x0
elfloader_offset = "0x80000" # Elfloader at 0x80000 (standard ARM64 boot offset)
kernel_offset = "0x200000"   # Kernel at 0x200000

# Stack location
stack_top_offset = "0x800000" # Stack top at 8MB

# Virtual memory layout (ARM64)
kernel_virt_base = "0xFFFF000000000000" # Kernel virtual address space start
user_virt_start = "0x80000000"          # User virtual address space start (2GB)
user_virt_max = "0x0000FFFFFFFFFFFF"    # User virtual address space max

# IPC shared memory region (reserved in each component's address space)
ipc_virt_start = "0x90000000" # IPC region start (2.25GB)
ipc_virt_end = "0xA0000000"   # IPC region end (2.5GB) - 256MB reserved

# Page sizes (ARM64 standard)
page_size = "0x1000"          # 4KB
large_page_size = "0x200000"  # 2MB
huge_page_size = "0x40000000" # 1GB

# Memory management configuration
heap_size = "0x100000"         # 1MB kernel heap
max_physical_frames = "262144" # 256K frames = 1GB max physical memory

# =============================================================================
# Generic ARM64 platform (template for custom boards)
# =============================================================================
[platform.generic-arm64]
name = "Generic ARM64"
arch = "aarch64"
kernel_target = "aarch64-unknown-none"
elfloader_target_json = "aarch64-unknown-none-elf.json"

# Memory layout (customize for your board)
ram_base = "0x80000000"
ram_size = "0x20000000" # 512MB

# Device addresses (customize for your board)
uart_base = "0x10000000"

# Interrupt controller (GICv2 - customize for your board)
gic_dist_base = "0x08000000" # GIC Distributor
gic_cpu_base = "0x08010000"  # GIC CPU Interface
gic_dist_size = "0x10000"    # 64KB
gic_cpu_size = "0x10000"     # 64KB

# IRQ numbers (customize for your board)
irq_timer = "27" # Timer IRQ
irq_uart0 = "33" # UART0 IRQ
irq_uart1 = "34" # UART1 IRQ

# Boot memory layout offsets
dtb_offset = "0x0"
elfloader_offset = "0x80000"
kernel_offset = "0x200000"

# Stack location
stack_top_offset = "0x1000000" # Stack top at 16MB

# Virtual memory layout (ARM64)
kernel_virt_base = "0xFFFF000000000000" # Kernel virtual address space start
user_virt_start = "0x80000000"          # User virtual address space start (2GB)
user_virt_max = "0x0000FFFFFFFFFFFF"    # User virtual address space max

# IPC shared memory region (reserved in each component's address space)
ipc_virt_start = "0x90000000" # IPC region start (2.25GB)
ipc_virt_end = "0xA0000000"   # IPC region end (2.5GB) - 256MB reserved

# Page sizes (ARM64 standard)
page_size = "0x1000"          # 4KB
large_page_size = "0x200000"  # 2MB
huge_page_size = "0x40000000" # 1GB

# Memory management configuration
heap_size = "0x100000"         # 1MB kernel heap
max_physical_frames = "262144" # 256K frames = 1GB max physical memory
