//! Component Registry
//!
//! This file is auto-generated by build.nu from components.toml
//! DO NOT EDIT MANUALLY

use crate::component_loader::{ComponentDescriptor, ComponentType};

/// All registered components
pub static COMPONENT_REGISTRY: &[ComponentDescriptor] = &[
    ComponentDescriptor {
        name: "system_init",
        binary: "system-init",
        component_type: ComponentType::Service,
        priority: 10,
        autostart: true,
        capabilities:     &[
        "process:create",
        "memory:allocate",
        "ipc:*",
        "caps:allocate"
    ],
        capabilities_bitmask: 15,
        binary_data: Some(include_bytes!("../../../../components/system-init/target/aarch64-unknown-none/release/system-init")),
    },
    ComponentDescriptor {
        name: "serial_driver",
        binary: "serial-driver",
        component_type: ComponentType::Driver,
        priority: 200,
        autostart: true,
        capabilities:     &[
        "memory_map:0x09000000:4096",
        "interrupt:33",
        "ipc:serial"
    ],
        capabilities_bitmask: 4,
        binary_data: None,
    },
    ComponentDescriptor {
        name: "timer_driver",
        binary: "timer-driver",
        component_type: ComponentType::Driver,
        priority: 200,
        autostart: true,
        capabilities:     &[
        "memory_map:0x0a003000:4096",
        "interrupt:27",
        "ipc:timer"
    ],
        capabilities_bitmask: 4,
        binary_data: None,
    },
    ComponentDescriptor {
        name: "process_manager",
        binary: "process-manager",
        component_type: ComponentType::Service,
        priority: 150,
        autostart: true,
        capabilities:     &[
        "process:create",
        "process:destroy",
        "memory:allocate",
        "ipc:procmgr"
    ],
        capabilities_bitmask: 7,
        binary_data: None,
    },
    ComponentDescriptor {
        name: "vfs_service",
        binary: "vfs-service",
        component_type: ComponentType::Service,
        priority: 100,
        autostart: false,
        capabilities:     &[
        "ipc:vfs",
        "ipc:serial"
    ],
        capabilities_bitmask: 4,
        binary_data: None,
    },
    ComponentDescriptor {
        name: "ipc_producer",
        binary: "ipc-producer",
        component_type: ComponentType::Service,
        priority: 100,
        autostart: false,
        capabilities:     &[
        "memory:map",
        "notification:signal",
        "notification:wait",
        "caps:allocate"
    ],
        capabilities_bitmask: 13,
        binary_data: Some(include_bytes!("../../../../components/ipc-producer/target/aarch64-unknown-none/release/ipc-producer")),
    },
    ComponentDescriptor {
        name: "ipc_consumer",
        binary: "ipc-consumer",
        component_type: ComponentType::Service,
        priority: 100,
        autostart: false,
        capabilities:     &[
        "memory:map",
        "notification:signal",
        "notification:wait",
        "caps:allocate"
    ],
        capabilities_bitmask: 13,
        binary_data: Some(include_bytes!("../../../../components/ipc-consumer/target/aarch64-unknown-none/release/ipc-consumer")),
    },
    ComponentDescriptor {
        name: "test_minimal",
        binary: "test-minimal",
        component_type: ComponentType::Service,
        priority: 200,
        autostart: false,
        capabilities:     &[],
        capabilities_bitmask: 0,
        binary_data: Some(include_bytes!("../../../../components/test-minimal/target/aarch64-unknown-none/release/test-minimal")),
    },
    ComponentDescriptor {
        name: "test_cap_revoke",
        binary: "test-cap-revoke",
        component_type: ComponentType::Service,
        priority: 200,
        autostart: false,
        capabilities:     &[
        "caps:allocate"
    ],
        capabilities_bitmask: 8,
        binary_data: Some(include_bytes!("../../../../components/test-cap-revoke/target/aarch64-unknown-none/release/test-cap-revoke")),
    },
    ComponentDescriptor {
        name: "test_memory",
        binary: "test-memory",
        component_type: ComponentType::Service,
        priority: 200,
        autostart: false,
        capabilities:     &[
        "memory:allocate",
        "memory:map",
        "caps:allocate"
    ],
        capabilities_bitmask: 9,
        binary_data: Some(include_bytes!("../../../../components/test-memory/target/aarch64-unknown-none/release/test-memory")),
    },
    ComponentDescriptor {
        name: "uart_driver",
        binary: "uart-driver",
        component_type: ComponentType::Driver,
        priority: 50,
        autostart: true,
        capabilities:     &[
        "caps:allocate",
        "irq:control",
        "memory:map"
    ],
        capabilities_bitmask: 9,
        binary_data: Some(include_bytes!("../../../../components/uart-driver/target/aarch64-unknown-none/release/uart-driver")),
    },
    ComponentDescriptor {
        name: "shell",
        binary: "shell",
        component_type: ComponentType::Application,
        priority: 120,
        autostart: false,
        capabilities:     &[
        "ipc:serial",
        "ipc:vfs",
        "ipc:procmgr"
    ],
        capabilities_bitmask: 4,
        binary_data: None,
    }
];

/// Get autostart components
pub fn get_autostart_components() -> impl Iterator<Item = &'static ComponentDescriptor> {
    COMPONENT_REGISTRY.iter().filter(|c| c.autostart)
}

/// Get component by name
pub fn get_component(name: &str) -> Option<&'static ComponentDescriptor> {
    COMPONENT_REGISTRY.iter().find(|c| c.name == name)
}

/// Total number of components
pub const COMPONENT_COUNT: usize = 12;
