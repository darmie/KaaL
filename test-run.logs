══════════════════════════════════════════════════════════
  KaaL Build System (Modular Nushell)
══════════════════════════════════════════════════════════
Platform: QEMU virt (ARM64)
Target:   aarch64

🔍 Discovered 9 components from components.toml:
  [✓] system_init
      Type: service, Priority: 255, Caps: 3
  [✓] serial_driver
      Type: driver, Priority: 200, Caps: 3
  [✓] timer_driver
      Type: driver, Priority: 200, Caps: 3
  [✓] process_manager
      Type: service, Priority: 150, Caps: 4
  [ ] vfs_service
      Type: service, Priority: 100, Caps: 2
  [ ] ipc_producer
      Type: service, Priority: 128, Caps: 3
  [ ] ipc_consumer
      Type: service, Priority: 128, Caps: 3
  [ ] test_minimal
      Type: service, Priority: 128, Caps: 0
  [ ] shell
      Type: application, Priority: 50, Caps: 3

✓ Component manifest validation passed


Building components...
  → Building system_init...
  → Building ipc_producer...
  → Building ipc_consumer...
  → Building test_minimal...
✓ Components built

Generating component registry...
✓ Generated registry with 9 components
Generating kernel memory configuration...

[1/4] Building kernel...
Generating kernel linker script...
     Removed 113 files, 112.2MiB total
✓ Kernel: 172.9 kB

[2/4] Building root-task...
Generating root-task linker script...
✓ Root-task: 91.1 kB

[3/4] Creating embeddable objects...
✓ kernel.o: 173.6 kB
✓ roottask.o: 91.8 kB

[4/4] Building elfloader...
     Removed 291 files, 151.8MiB total

══════════════════════════════════════════════════════════
  ✓ BUILD COMPLETE
══════════════════════════════════════════════════════════

Platform:  QEMU virt (ARM64)
Bootimage: runtime/elfloader/target/aarch64-unknown-none-elf/release/elfloader

✓ Final Image: 356.7 kB

Run in QEMU:
  qemu-system-aarch64 -machine virt -cpu cortex-a53 -m 128M -nographic -kernel runtime/elfloader/target/aarch64-unknown-none-elf/release/elfloader

📦 Autostart Components: 4
  • system_init (service, priority: 255)
  • serial_driver (driver, priority: 200)
  • timer_driver (driver, priority: 200)
  • process_manager (service, priority: 150)

══════════════════════════════════════════════════════════
  🚀 LAUNCHING QEMU
══════════════════════════════════════════════════════════

Machine: virt
CPU:     cortex-a53
Memory:  128M
Image:   runtime/elfloader/target/aarch64-unknown-none-elf/release/elfloader

[33mPress Ctrl+A then X to exit QEMU[0m

!@═══════════════════════════════════════════════════════════
  KaaL Elfloader v0.1.0 - Rust Microkernel Boot Loader
═══════════════════════════════════════════════════════════

DTB address: 0x40000000
Device tree parsed successfully
Model: linux,dummy-virt
Memory region: 0x40000000 - 0x48000000 (128 MB)

Loading images...
Loading embedded images from ELF sections...
  Kernel: 0x40205000 - 0x4022f3b8 (168 KB)
  User:   0x40230000 - 0x40246430 (89 KB)
ELF: entry=0x40400000, 4 program headers at offset 0x40
  LOAD segment 0: vaddr=0x40400000, filesz=0x8bd4, memsz=0x8bd4
  LOAD segment 1: vaddr=0x40409000, filesz=0x6630, memsz=0x6630
  LOAD segment 2: vaddr=0x40410000, filesz=0x10, memsz=0x2e000
Kernel loaded at entry point: 0x40400000
ELF: entry=0x40100000, 3 program headers at offset 0x40
  LOAD segment 0: vaddr=0x40100000, filesz=0x2420, memsz=0x2420
  LOAD segment 1: vaddr=0x40103000, filesz=0x32d2, memsz=0x32d2
Root task loaded at entry point: 0x40100000
Images loaded successfully!
Kernel entry: 0x40400000
Root task:  0x40230000 - 0x40246430
Root entry: 0x40100000
DTB info will be passed to kernel via function parameters
  DTB: 0x40000000 (size: 1048576)
Kernel entry: 0x40400000
User image: 0x40230000 - 0x40246430
User entry: 0x40100000

Setting up page tables...
Setting up identity map: 0x10000000 - 0x40246e28
Page tables configured
TTBR0: 0x47ffc000

Skipping MMU setup - kernel will handle it

Jumping to KaaL kernel at 0x40400000...
  Passing root task info:
    user_img: 0x40230000 - 0x40246430
    user_entry: 0x40100000
    pv_offset: 0x0
    dtb: 0x40000000 (size: 1048576)
═══════════════════════════════════════════════════════════

═══════════════════════════════════════════════════════════
  KaaL Rust Microkernel v0.1.0
  Chapter 1: Bare Metal Boot & Early Init
═══════════════════════════════════════════════════════════

Boot parameters:
  DTB:         0x40000000 (size: 1048576 bytes)
  Root task:   0x40230000 - 0x40246430
  Entry:       0x40100000
  PV offset:   0x0

[boot] Boot info initialized and stored globally
Parsing device tree...
DTB parse: reading header at 0x40000000
DTB magic: 0xd00dfeed (expected 0xd00dfeed)
DTB magic OK
Parsing DTB structure at 0x40000040
  [1] Token 0x1 at offset 0x0
  [2] Token 0x3 at offset 0x8
    -> Prop 'interrupt-parent' (len=4)
  [3] Token 0x3 at offset 0x18
    -> Prop 'dma-coherent' (len=0)
  [4] Token 0x3 at offset 0x24
    -> Prop 'model' (len=17)
  Found model: 'linux,dummy-virt'
  [5] Token 0x3 at offset 0x44
    -> Prop '#size-cells' (len=4)
  [6] Token 0x3 at offset 0x54
    -> Prop '#address-cells' (len=4)
  [7] Token 0x3 at offset 0x64
    -> Prop 'compatible' (len=17)
  [8] Token 0x1 at offset 0x84
  [9] Token 0x3 at offset 0x90
    -> Prop 'migrate' (len=4)
  [10] Token 0x3 at offset 0xa0
    -> Prop 'cpu_on' (len=4)
  [11] Token 0x3 at offset 0xb0
    -> Prop 'cpu_off' (len=4)
  [12] Token 0x3 at offset 0xc0
    -> Prop 'cpu_suspend' (len=4)
  [13] Token 0x3 at offset 0xd0
    -> Prop 'method' (len=4)
  [14] Token 0x3 at offset 0xe0
    -> Prop 'compatible' (len=35)
  [15] Token 0x2 at offset 0x110
  [16] Token 0x1 at offset 0x114
    -> Entering memory node: 'memory@40000000'
  [17] Token 0x3 at offset 0x128
    -> Prop 'reg' (len=16)
    -> Reading memory reg property (len=16)
    -> Got start: 0x40000000
    -> Got size: 0x8000000
  Found memory: 0x40000000 - 0x48000000
  Found all required info, stopping parse
Device tree parsed successfully:
  Model:       linux,dummy-virt
  Memory:      0x40000000 - 0x48000000 (128 MB)

═══════════════════════════════════════════════════════════
  Chapter 1: COMPLETE ✓
═══════════════════════════════════════════════════════════

═══════════════════════════════════════════════════════════
  Chapter 2: Memory Management
═══════════════════════════════════════════════════════════

[memory] Initializing memory subsystem
  RAM:    0x40000000 - 0x48000000 (128MB)
  Kernel: 0x40400000 - 0x4043e000 (248KB)
  Frames: 31682/32768 free (123MB usable)

[test] Testing frame allocator...
  Allocated frame: PFN(263230) @ 0x4043e000
  Allocated frame: PFN(263231) @ 0x4043f000
  Deallocated both frames
  Final stats: 31682/32768 frames free
[memory] Setting up page tables and MMU...
  Mapping DTB: 0x40000000 - 0x40400000
  Mapping kernel: 0x40400000 - 0x4043e000
  Mapping stack/heap region: 0x4043e000 - 0x48000000
  Mapping UART device: 0x9000000
  Root page table at: 0x4043e000
[exception] Installing exception vector table at 0x0000000040400800
[exception] Exception handlers installed
  Enabling MMU...
  MMU enabled: true
  ✓ MMU enabled successfully with virtual memory!
[memory] No kernel heap (seL4 design: static allocation only)

═══════════════════════════════════════════════════════════
  Chapter 2: COMPLETE ✓
═══════════════════════════════════════════════════════════

═══════════════════════════════════════════════════════════
  Chapter 3: Exception Handling & Syscalls
═══════════════════════════════════════════════════════════


═══════════════════════════════════════════════════════════
  Chapter 3: Phase 1 COMPLETE ✓ (Exception vectors)
═══════════════════════════════════════════════════════════

[info] Exception handling verified:
  ✓ Trap frame saves/restores all 36 registers
  ✓ ESR/FAR decoding for fault analysis
  ✓ Data abort detection (EC 0x25)
  ✓ Syscall detection (EC 0x15)
  ✓ Context switching infrastructure ready

═══════════════════════════════════════════════════════════
  Chapter 3: COMPLETE ✓
═══════════════════════════════════════════════════════════

Kernel initialization complete!

═══════════════════════════════════════════════════════════
  Scheduler Initialization
═══════════════════════════════════════════════════════════

[scheduler] Initialized with idle thread at 0x40444000

═══════════════════════════════════════════════════════════
  Chapter 7: Root Task & Boot Protocol
═══════════════════════════════════════════════════════════

[root_task] Creating root task:
  Root task image: 0x40230000 - 0x40246430 (89 KB)
  Entry point:     0x40100000
  User page table: 0x40445000
  Mapping kernel regions into user PT (EL1-only):
    Kernel: 0x40400000 - 0x4043e000
    Kernel data: 0x4043e000 - 0x48000000
    UART: 0x9000000
  ✓ Kernel regions mapped
  ELF header: 3 program headers at offset 0x40
  LOAD segment 0:
    vaddr:  0x40100000
    offset: 0x10000
    filesz: 0x2420 (9248 bytes)
    memsz:  0x2420 (9248 bytes)
    flags:  0x5 (R-X)
    Mapping virt 0x40100000 → phys 0x40240000 (end: 0x40103000)
      Mapping page 0 at virt=0x40100000 phys=0x40240000
      Mapping page 1 at virt=0x40101000 phys=0x40241000
      Mapping page 2 at virt=0x40102000 phys=0x40242000
    Mapped 3 pages (12 KB)
  LOAD segment 1:
    vaddr:  0x40103000
    offset: 0x13000
    filesz: 0x32d2 (13010 bytes)
    memsz:  0x32d2 (13010 bytes)
    flags:  0x4 (R--)
    Mapping virt 0x40103000 → phys 0x40243000 (end: 0x40107000)
      Mapping page 0 at virt=0x40103000 phys=0x40243000
      Mapping page 1 at virt=0x40104000 phys=0x40244000
      Mapping page 2 at virt=0x40105000 phys=0x40245000
      Mapping page 3 at virt=0x40106000 phys=0x40246000
    Mapped 4 pages (16 KB)
  Total: 7 pages mapped for all LOAD segments
  Mapping stack: 0x400bf000 - 0x400ff000
  Entry point:     0x40100000
  Stack:           0x400bf000 - 0x400ff000 (256 KB)
  ✓ Root task ready for EL0 transition

[root_task] Creating boot info for runtime services...
[boot_info] Created userspace boot info:
  Devices:  4 regions
  Untyped:  1 regions
  RAM size: 128 MB
  Boot info phys:  0x4044c000
  Boot info virt:  0x7ffff000
  Boot info size:  11088 bytes
  ✓ Boot info mapped for userspace
  Creating CNode for capability space...
  CNode:           0x4044e000 (256 slots)
  Creating root TCB...
  Root TCB frame:  0x4044f000
  Initializing TCB...
  Writing TCB...
  Setting state to Running...
  Setting saved_ttbr0...
  Registering with scheduler...
  Root TCB:        0x4044f000 ✓

[root_task] Transitioning to EL0...
  Entry:    0x40100000
  Stack:    0x400ff000
  TTBR0:    0x40445000
  About to call transition_to_el0...
  VBAR_EL1: 0x40400800
  CurrentEL before: 0x4
  Cache flushed
  First instruction at phys 0x40240000: 0xa9bb7bfd
  Expected: 0xa9ba7bfd (stp x29, x30, [sp, #-0x60]!)
  User PT is at phys 0x40445000

    $$╲   $$╲                    $$╲       
    $$ │ $$  │                   $$ │      
    $$ │$$  ╱ $$$$$$╲   $$$$$$╲  $$ │      
    $$$$$  ╱  ╲____$$╲  ╲____$$╲ $$ │      
    $$  $$<   $$$$$$$ │ $$$$$$$ │$$ │      
    $$ │╲$$╲ $$  __$$ │$$  __$$ │$$ │      
    $$ │ ╲$$╲╲$$$$$$$ │╲$$$$$$$ │$$$$$$$$╲ 
    ╲__│  ╲__│╲_______│ ╲_______│╲________│

═══════════════════════════════════════════════════════════
  KaaL Root Task (EL0) v0.1.0
  Chapter 7: Root Task & Boot Protocol
═══════════════════════════════════════════════════════════

[root_task] Hello from userspace (EL0)!
[root_task] Syscalls working: sys_print functional

═══════════════════════════════════════════════════════════
  Chapter 7: COMPLETE ✓
═══════════════════════════════════════════════════════════

═══════════════════════════════════════════════════════════
  Chapter 9 Phase 1: Testing Capability Broker API
═══════════════════════════════════════════════════════════

[root_task] Initializing Capability Broker...
  ✓ Capability Broker initialized

[root_task] Test 1: Allocating memory via broker...
  ✓ Allocated 4096 bytes at: 0x0000000040450000[exception] Prefetch/Instruction Abort from EL0:
  PC (ELR): 0x40401134
  Fault Address (FAR): 0x40401134
  ESR: 0x8200000f
  ISS: 0xf
