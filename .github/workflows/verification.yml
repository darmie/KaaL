name: Formal Verification

on:
  push:
    branches: [main]
    paths:
      - "kernel/src/verified/**"
      - "scripts/verify.nu"
      - ".github/workflows/verification.yml"
  pull_request:
    branches: [main]
    paths:
      - "kernel/src/verified/**"
      - "scripts/verify.nu"
      - ".github/workflows/verification.yml"
  workflow_dispatch:

jobs:
  verify:
    name: Verus Verification
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.88.0

      - name: Install Nushell
        run: |
          wget https://github.com/nushell/nushell/releases/download/0.98.0/nu-0.98.0-x86_64-unknown-linux-gnu.tar.gz
          tar xzf nu-0.98.0-x86_64-unknown-linux-gnu.tar.gz
          sudo mv nu-0.98.0-x86_64-unknown-linux-gnu/nu /usr/local/bin/
          nu --version

      - name: Cache Verus
        id: cache-verus
        uses: actions/cache@v4
        with:
          path: ~/verus
          key: verus-latest-${{ runner.os }}

      - name: Install Verus
        if: steps.cache-verus.outputs.cache-hit != 'true'
        run: |
          # Download latest release to temp location
          DOWNLOAD_URL=$(curl -s https://api.github.com/repos/verus-lang/verus/releases/latest | grep "browser_download_url.*x86-linux.zip" | cut -d '"' -f 4)
          wget -O /tmp/verus.zip "$DOWNLOAD_URL"

          # Extract to temp and move to final location
          unzip -q /tmp/verus.zip -d /tmp/verus-extract

          # Find the extracted directory and move all contents (including hidden files)
          EXTRACTED_DIR=$(find /tmp/verus-extract -mindepth 1 -maxdepth 1 -type d | head -n 1)
          mkdir -p ~/verus
          mv "$EXTRACTED_DIR"/* ~/verus/
          mv "$EXTRACTED_DIR"/.[!.]* ~/verus/ 2>/dev/null || true

          chmod +x ~/verus/verus
          ~/verus/verus --version

      - name: Run Verus verification
        run: |
          export PATH="$HOME/verus:$PATH"
          nu scripts/verify.nu 2>&1 | tee /tmp/verify.log

      - name: Extract verification stats
        if: success()
        id: stats
        run: |
          # Extract verification stats from output
          ITEMS=$(grep "All verification passed" /tmp/verify.log | sed -E 's/.*passed: ([0-9]+) items verified.*/\1/')
          MODULES=$(grep "Verified modules:" /tmp/verify.log | sed -E 's/.*modules: ([0-9]+)\/[0-9]+/\1/')

          echo "items=$ITEMS" >> $GITHUB_OUTPUT
          echo "modules=$MODULES" >> $GITHUB_OUTPUT
          echo "üìä Verification: $MODULES modules, $ITEMS items"

      - name: Generate badge SVG
        if: success()
        run: |
          # Create badges directory if it doesn't exist
          mkdir -p .github/badges

          ITEMS="${{ steps.stats.outputs.items }}"
          MESSAGE="${ITEMS} items verified"

          # Calculate text widths (approximate)
          LABEL_WIDTH=75
          MESSAGE_WIDTH=$((${#MESSAGE} * 6 + 10))
          TOTAL_WIDTH=$((LABEL_WIDTH + MESSAGE_WIDTH))
          MESSAGE_X=$((LABEL_WIDTH + MESSAGE_WIDTH / 2))

          # Generate SVG badge (shields.io style)
          cat > .github/badges/verification.svg <<EOF
          <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="${TOTAL_WIDTH}" height="20" role="img" aria-label="verification: ${MESSAGE}">
            <title>verification: ${MESSAGE}</title>
            <linearGradient id="s" x2="0" y2="100%">
              <stop offset="0" stop-color="#bbb" stop-opacity=".1"/>
              <stop offset="1" stop-opacity=".1"/>
            </linearGradient>
            <clipPath id="r">
              <rect width="${TOTAL_WIDTH}" height="20" rx="3" fill="#fff"/>
            </clipPath>
            <g clip-path="url(#r)">
              <rect width="${LABEL_WIDTH}" height="20" fill="#555"/>
              <rect x="${LABEL_WIDTH}" width="${MESSAGE_WIDTH}" height="20" fill="#4c1"/>
              <rect width="${TOTAL_WIDTH}" height="20" fill="url(#s)"/>
            </g>
            <g fill="#fff" text-anchor="middle" font-family="Verdana,Geneva,DejaVu Sans,sans-serif" text-rendering="geometricPrecision" font-size="110">
              <text aria-hidden="true" x="385" y="150" fill="#010101" fill-opacity=".3" transform="scale(.1)" textLength="650">verification</text>
              <text x="385" y="140" transform="scale(.1)" fill="#fff" textLength="650">verification</text>
              <text aria-hidden="true" x="${MESSAGE_X}0" y="150" fill="#010101" fill-opacity=".3" transform="scale(.1)" textLength="${MESSAGE_WIDTH}0">${MESSAGE}</text>
              <text x="${MESSAGE_X}0" y="140" transform="scale(.1)" fill="#fff" textLength="${MESSAGE_WIDTH}0">${MESSAGE}</text>
            </g>
          </svg>
          EOF

          echo "Generated badge SVG:"
          cat .github/badges/verification.svg

      - name: Commit badge SVG
        if: success()
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add .github/badges/verification.svg

          # Only commit if there are changes
          git diff --staged --quiet || git commit -m "chore(ci): Update verification badge [skip ci]"
          git push

      - name: Summary
        if: success()
        run: |
          echo "‚úÖ Verification completed successfully!"
          echo "üìä ${{ steps.stats.outputs.modules }} modules, ${{ steps.stats.outputs.items }} items verified"
          echo "üéñÔ∏è  Badge updated: .github/badges/verification.json"
