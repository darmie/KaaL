# KaaL System Component Manifest
#
# This file lives at the PROJECT ROOT so developers can easily discover and configure
# system components without diving into runtime/ or kernel/ directories.
#
# Components are automatically discovered and embedded into the system at build time.
# The root-task reads this manifest and spawns components in the order listed here.
#
# ## Component Definition Format
#
# [[component]]
# name = "component_name"           # Unique component identifier
# binary = "binary-name"            # Binary name in target/ (without path)
# type = "driver"                   # driver | service | application
# priority = 200                    # 0-255 (higher = more important)
# autostart = true                  # Spawn automatically at boot
# capabilities = [                  # Required capabilities
#     "memory_map:ADDR:SIZE",       # Physical memory mapping
#     "interrupt:IRQ",              # Interrupt access
#     "ipc:NAME",                   # IPC endpoint
#     "process:create",             # Process creation
# ]
#
# ## Component Types
#
# - driver:      Device drivers with hardware access (MMIO, IRQ, DMA)
# - service:     System services (no hardware, provides IPC services)
# - application: User-facing programs (minimal privileges)
#
# ## Boot Sequence
#
# 1. Kernel boots and creates root-task
# 2. Root-task reads this manifest
# 3. Root-task spawns system_init (first component, elevated privileges)
# 4. system_init spawns remaining components in phases:
#    - Phase 1: Device drivers (serial, timer, etc.)
#    - Phase 2: System services (process_manager, vfs, etc.)
#    - Phase 3: User applications (shell, etc.)
#
# Add your components below in the desired spawn order:

# System Initializer - First component spawned
# This is the "system_init" component that bootstraps the rest of the system
[[component]]
name = "system_init"
binary = "system-init"
type = "service"
priority = 50  # High priority - system_init is main entry point
autostart = true  # Re-enabled now that priorities work
capabilities = [
    "process:create",      # Can spawn other processes
    "memory:allocate",     # Can allocate memory
    "ipc:*",              # Full IPC access
]

# Device Drivers - Low-level hardware access
[[component]]
name = "serial_driver"
binary = "serial-driver"
type = "driver"
priority = 200
autostart = true
capabilities = [
    "memory_map:0x09000000:4096",  # UART0 MMIO
    "interrupt:33",                 # UART0 IRQ
    "ipc:serial",                   # Serial IPC endpoint
]

[[component]]
name = "timer_driver"
binary = "timer-driver"
type = "driver"
priority = 200
autostart = true
capabilities = [
    "memory_map:0x0a003000:4096",  # Timer MMIO
    "interrupt:27",                 # Timer IRQ
    "ipc:timer",                    # Timer IPC endpoint
]

# System Services - Core OS services
[[component]]
name = "process_manager"
binary = "process-manager"
type = "service"
priority = 150
autostart = true
capabilities = [
    "process:create",
    "process:destroy",
    "memory:allocate",
    "ipc:procmgr",
]

[[component]]
name = "vfs_service"
binary = "vfs-service"
type = "service"
priority = 100
autostart = false  # Spawned on-demand
capabilities = [
    "ipc:vfs",
    "ipc:serial",    # For debug output
]

# Test Components - IPC Testing (Phase 5)
[[component]]
name = "ipc_producer"
binary = "ipc-producer"
type = "service"
priority = 60  # Same priority as consumer for round-robin scheduling
autostart = true  # Spawned by root-task (system_init can't spawn yet - caps not granted)
# spawned_by = "system_init"  # TODO: Enable when capability granting is implemented
capabilities = [
    "memory:map",
    "notification:signal",
    "notification:wait",
]

[[component]]
name = "ipc_consumer"
binary = "ipc-consumer"
type = "service"
priority = 60  # Run first to initialize and wait for producer
autostart = true  # Spawned by root-task (system_init can't spawn yet - caps not granted)
# spawned_by = "system_init"  # TODO: Enable when capability granting is implemented
capabilities = [
    "memory:map",
    "notification:signal",
    "notification:wait",
]

# Test component - Capability enforcement test
[[component]]
name = "test_minimal"
binary = "test-minimal"
type = "service"
priority = 45  # Run before system_init to test capabilities early
autostart = true  # Enable to test capability enforcement
capabilities = []  # NO capabilities - tests that syscalls are properly denied

# Applications - User-facing programs
[[component]]
name = "shell"
binary = "shell"
type = "application"
priority = 50
autostart = false  # Spawned by system_init after drivers ready
capabilities = [
    "ipc:serial",
    "ipc:vfs",
    "ipc:procmgr",
]
