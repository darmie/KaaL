# KaaL System Component Manifest
#
# This file lives at the PROJECT ROOT so developers can easily discover and configure
# system components without diving into runtime/ or kernel/ directories.
#
# Components are automatically discovered and embedded into the system at build time.
# The root-task reads this manifest and spawns components in the order listed here.
#
# ## Component Definition Format
#
# [[component]]
# name = "component_name"           # Unique component identifier
# binary = "binary-name"            # Binary name in target/ (without path)
# type = "driver"                   # driver | service | application
# priority = 200                    # 0-255 (higher = more important)
# autostart = true                  # Spawn automatically at boot
# capabilities = [                  # Required capabilities
#     "memory_map:ADDR:SIZE",       # Physical memory mapping
#     "interrupt:IRQ",              # Interrupt access
#     "ipc:NAME",                   # IPC endpoint
#     "process:create",             # Process creation
# ]
#
# ## Component Types
#
# - driver:      Device drivers with hardware access (MMIO, IRQ, DMA)
# - service:     System services (no hardware, provides IPC services)
# - application: User-facing programs (minimal privileges)
#
# ## Boot Sequence
#
# 1. Kernel boots and creates root-task
# 2. Root-task reads this manifest
# 3. Root-task spawns ALL components with autostart=true in listed order:
#    - Phase 1: Device drivers (serial, timer, uart, etc.)
#    - Phase 2: System services (process_manager, vfs, etc.)
#    - Phase 3: Test/IPC components (producer, consumer, etc.)
# 4. Components with autostart=false can be spawned later on-demand
#
# This architecture (root-task spawns all) was chosen because:
# - Root-task has full kernel privileges and known-good initialization state
# - Previous system_init spawning had bugs: only first spawned process worked
# - Simpler, more reliable, and proven to work in testing
#
# Add your components below in the desired spawn order:

# System Initializer - Capability-based process spawning
# Uses delegated UntypedMemory capability from root-task to spawn components
# This is the PROPER seL4-style architecture for userspace spawning
[[component]]
name = "system_init"
binary = "system-init"
type = "service"
priority = 10  # High priority - spawns other components at boot
autostart = true  # Spawned by root-task, receives Untyped cap
capabilities = [
    "untyped:1",         # Receives UntypedMemory cap from root-task slot 1
    "caps:allocate",     # Can allocate capability slots
    "memory:map",        # Can map pages into child processes
    "memory:allocate",   # Can allocate physical memory
    "process:create",    # Can create new processes (for spawning components)
]

# Device Drivers - Low-level hardware access
[[component]]
name = "serial_driver"
binary = "serial-driver"
type = "driver"
priority = 200
autostart = true
capabilities = [
    "memory_map:0x09000000:4096", # UART0 MMIO
    "interrupt:33",               # UART0 IRQ
    "ipc:serial",                 # Serial IPC endpoint
]

[[component]]
name = "timer_driver"
binary = "timer-driver"
type = "driver"
priority = 200
autostart = true
capabilities = [
    "memory_map:0x0a003000:4096", # Timer MMIO
    "interrupt:27",               # Timer IRQ
    "ipc:timer",                  # Timer IPC endpoint
]

# System Services - Core OS services
[[component]]
name = "process_manager"
binary = "process-manager"
type = "service"
priority = 150
autostart = true
capabilities = [
    "process:create",
    "process:destroy",
    "memory:allocate",
    "ipc:procmgr",
]

[[component]]
name = "vfs_service"
binary = "vfs-service"
type = "service"
priority = 100
autostart = false # Spawned on-demand
capabilities = [
    "ipc:vfs",
    "ipc:serial", # For debug output
]

# Test Components - IPC Testing (Phase 5)
# These will be spawned BY system_init using capability-based spawning
[[component]]
name = "ipc_producer"
binary = "ipc-producer"
type = "service"
priority = 100 # Medium priority - actual workload
autostart = false # Will be spawned by system_init via sys_retype
spawned_by = "system_init"
capabilities = [
    "memory:map",
    "notification:signal",
    "notification:wait",
    "caps:allocate",       # Needed to create notifications
]

[[component]]
name = "ipc_consumer"
binary = "ipc-consumer"
type = "service"
priority = 100 # Medium priority - actual workload
autostart = false # Will be spawned by system_init via sys_retype
spawned_by = "system_init"
capabilities = [
    "memory:map",
    "notification:signal",
    "notification:wait",
    "caps:allocate",       # Needed to create notifications
]

# Test Components - Capability System Tests
[[component]]
name = "test_minimal"
binary = "test-minimal"
type = "service"
priority = 200          # Low priority - background test
autostart = false
capabilities = []       # NO capabilities - tests that syscalls are properly denied

[[component]]
name = "test_cap_revoke"
binary = "test-cap-revoke"
type = "service"
priority = 200 # Low priority - background test
autostart = false # Can be spawned on-demand later
capabilities = [
    "caps:allocate", # Needs CAP_CAPS to test revocation
]

[[component]]
name = "test_memory"
binary = "test-memory"
type = "service"
priority = 200 # Low priority - background test
autostart = false # Can be spawned on-demand later
capabilities = [
    "memory:allocate", # Needs CAP_MEMORY to test remap/share
    "memory:map",      # Needs CAP_MEMORY to map pages
    "caps:allocate",   # Needs CAP_CAPS to allocate capability slots for IRQ tests
]

[[component]]
name = "uart_driver"
binary = "uart-driver"
type = "driver"
priority = 50    # High priority - runs before applications
autostart = true # Must autostart to handle UART interrupts for notepad
# Spawned by root-task (not system_init) to receive IRQControl delegation
capabilities = [
    "caps:allocate", # Needs CAP_CAPS to allocate notification/IRQHandler slots
    "irq:control",   # Receives IRQControl delegation from root-task
    "memory:map",    # Needs CAP_MEMORY to map UART MMIO region
]

# Applications - User-facing programs
[[component]]
name = "notepad"
binary = "notepad"
type = "application"
priority = 110   # Medium priority - text editor
autostart = false # Can be enabled for testing UART input/output
capabilities = [
    "memory:map",     # Needs to map shared IPC buffer from UART driver
    "caps:allocate",  # Needs to allocate capability slot for notification
]

[[component]]
name = "shell"
binary = "shell"
type = "application"
priority = 120                                          # Medium-low priority - interactive application
autostart = false                                       # Spawned by system_init after drivers ready
capabilities = ["ipc:serial", "ipc:vfs", "ipc:procmgr"]
